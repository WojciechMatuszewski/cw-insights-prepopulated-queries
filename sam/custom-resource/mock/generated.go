// Code generated by MockGen. DO NOT EDIT.
// Source: ../main.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cloudwatchlogs "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	gomock "github.com/golang/mock/gomock"
)

// MockQueryService is a mock of QueryService interface.
type MockQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceMockRecorder
}

// MockQueryServiceMockRecorder is the mock recorder for MockQueryService.
type MockQueryServiceMockRecorder struct {
	mock *MockQueryService
}

// NewMockQueryService creates a new mock instance.
func NewMockQueryService(ctrl *gomock.Controller) *MockQueryService {
	mock := &MockQueryService{ctrl: ctrl}
	mock.recorder = &MockQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryService) EXPECT() *MockQueryServiceMockRecorder {
	return m.recorder
}

// DeleteQueryDefinition mocks base method.
func (m *MockQueryService) DeleteQueryDefinition(ctx context.Context, params *cloudwatchlogs.DeleteQueryDefinitionInput, optsFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optsFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueryDefinition", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.DeleteQueryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueryDefinition indicates an expected call of DeleteQueryDefinition.
func (mr *MockQueryServiceMockRecorder) DeleteQueryDefinition(ctx, params interface{}, optsFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optsFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueryDefinition", reflect.TypeOf((*MockQueryService)(nil).DeleteQueryDefinition), varargs...)
}

// PutQueryDefinition mocks base method.
func (m *MockQueryService) PutQueryDefinition(ctx context.Context, params *cloudwatchlogs.PutQueryDefinitionInput, optsFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optsFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutQueryDefinition", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.PutQueryDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutQueryDefinition indicates an expected call of PutQueryDefinition.
func (mr *MockQueryServiceMockRecorder) PutQueryDefinition(ctx, params interface{}, optsFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optsFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutQueryDefinition", reflect.TypeOf((*MockQueryService)(nil).PutQueryDefinition), varargs...)
}
